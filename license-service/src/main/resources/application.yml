server:
  port: 8080

eureka:
  instance:
    preferIpAddress: true
    metadataMap:
      user.name: ${spring.security.user.name}
      user.password: ${spring.security.user.password}
  client:
    enabled: false
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

spring:
  application:
    name: license-service
  cloud:
    config:
      enabled: false
    stream:
      bindings:
        inputOrganization:
          destination: sc.organization.change.topic
          contentType: application/json
          group: license.group
  #config:
  #  import: optional:configserver:http://dummy-configserver/
  datasource:
    url: "jdbc:mysql://192.168.11.234:3306/sc_database?useUnicode=true&characterEncoding=utf8"
    username: "springcloud"
    password: "sc_passw0rd"
    driverClassName: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      minimumIdle: 1
      maximumPoolSize: 2
      idleTimeout: 600000
      maxLifetime: 1800000
  sql:
    init:
      mode: ALWAYS
      schema-locations: schema.sql
  redis:
    host: 192.168.11.234
    port: 6379
  cache:
    type: REDIS
  rabbitmq:
    host: 192.168.11.234
    port: 5672
  security:
    user:
      name: actuator
      password: actuator
      roles: ACTUATOR
    oauth2:
      client:
        provider:
          sc-provider:
            # align with the attribute name in authentication service
            userNameAttribute: username
            userInfoUri: http://localhost:8901/user
        registration:
          sc-provider:
            clientId: eagleeye
            clientSecret: thisissecret
            authorizationGrantType: client_credentials,password,refresh_token
  sleuth:
    sampler:
      probability: 0.0
  zipkin:
    sender:
      # otherwise rabbit is used if available
      type: WEB

management:
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    export:
      prometheus:
        enabled: true
        descriptions: false
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 10ms, 20ms, 100ms, 1000ms

logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    com.gonwan.springcloud: DEBUG

application:
  organizationUrl: http://localhost:8085

resilience4j.circuitbreaker:
  instances:
    lsGetOrganization:
      registerHealthIndicator: true
      slidingWindowType: TIME_BASED
      slidingWindowSize: 60
    lsGetLicenses:
      registerHealthIndicator: true
      slidingWindowType: TIME_BASED
      slidingWindowSize: 60
      minimumNumberOfCalls: 5
      permittedNumberOfCallsInHalfOpenState: 1
      waitDurationInOpenState: 60s
      failureRateThreshold: 20
      slowCallRateThreshold: 40
      slowCallDurationThreshold: 2s
      eventConsumerBufferSize: 10

resilience4j.ratelimiter:
  instances:
    lsGetLicense:
      registerHealthIndicator: true
      limitForPeriod: 2
      limitRefreshPeriod: 10s
      timeoutDuration: 1s
      eventConsumerBufferSize: 10
